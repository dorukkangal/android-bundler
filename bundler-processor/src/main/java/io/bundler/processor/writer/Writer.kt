package io.bundler.processor.writer

import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.jvm.jvmName
import io.bundler.processor.EnvironmentProvider
import io.bundler.processor.model.ClassModel
import io.bundler.processor.model.FieldModel
import io.bundler.processor.util.javaToKotlinType

internal abstract class Writer<T>(protected val environmentProvider: EnvironmentProvider) {

    @Throws(Exception::class)
    abstract fun write(file: FileSpec.Builder? = null, input: T)

    protected fun file(packageName: String, fileName: String): FileSpec.Builder {
        return FileSpec.builder(packageName, fileName)
                .jvmName(fileName)
                .indent("    ")
                .addComment("\nGenerated by Bundler.io\n")
    }

    protected fun generateParam(classModel: ClassModel): ParameterSpec {
        return generateParam(classModel.className, classModel.typeName)
    }

    protected fun generateParam(fieldModel: FieldModel): ParameterSpec {
        return generateParam(fieldModel.name, fieldModel.typeName, fieldModel.isRequired)
    }

    protected fun generateParam(name: String, type: TypeName, isRequired: Boolean = true): ParameterSpec {
        return if (isRequired) {
            ParameterSpec.builder(
                    name,
                    type.javaToKotlinType()
            ).build()
        } else {
            ParameterSpec.builder(
                    name,
                    type.javaToKotlinType().copy(isRequired.not())
            ).defaultValue("%L", "null")
                    .build()
        }
    }

    protected fun FunSpec.Builder.indent(count: Int = 1): FunSpec.Builder {
        repeat(count) {
            this.addCode(CodeBlock.Builder().indent().build())
        }
        return this
    }

    protected fun FunSpec.Builder.unindent(count: Int = 1): FunSpec.Builder {
        repeat(count) {
            this.addCode(CodeBlock.Builder().unindent().build())
        }
        return this
    }
}
